<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="62c14982-1a93-4253-b7db-e74267cfb22b" name="Default Changelist" comment="" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="ProjectId" id="1QMO2lhYF5f8nUxN7jhIn63VWGe" />
  <component name="PropertiesComponent">
    <property name="cursive.last.file.extension.C\:/Users/Ananda/Documents/clojure-project/ninety-nine-lisp-problems/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../clojure-course/clojure_course/s03" />
    <property name="settings.editor.selected.configurable" value="Clojure.IDE" />
  </component>
  <component name="ReplState" timestamp="1568036739913">{:repl-history {:ide [], :local [{:command &quot;(and nil nil)&quot;, :offset 13, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y]\n     ((when (&lt; i (count x))\n        (nth x (- i 1))\n        (recur (inc i))\n        ))))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 136, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(loop [x 5\n       result []]\n  (if (&gt; x 0)\n    (recur (dec x) (conj result (+ 2 x)))\n    result))&quot;, :offset 97, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y]\n     (when (&lt; i (count x))\n       (nth x (- i 1))\n       (recur (inc i))\n       )))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 131, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (when (&lt; i (count x))\n       (conj result (nth x (- i 1)))\n       (recur (inc i))\n       )))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 165, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (inc i) conj result (nth x (- i 1)))\n       (result)\n       )))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 170, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (inc i) conj result (nth x (- i 1)))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 160, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (inc i) (conj result (nth x (- i 1))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 162, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (+ i i) (conj result (nth x (- i 1))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 162, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (conj result (concat (subvec x (- i 1)))\n                            (subvec x i)))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 215, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (conj result (concat (subvec x (- i 1))\n                                           (subvec x i))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 230, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(concat (subvec [1 2 3 4 5 6 7] 3)\n        (subvec [1 2 3 4 5 6 7] (inc 3)))&quot;, :offset 76, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(let [coll [0 1 2 3 4 5]\n      i 3]\n  (concat (subvec coll 0 i)\n          (subvec coll (inc i))))&quot;, :offset 97, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (concat (subvec x 0 y)\n           (subvec x (inc y))))\n [0 1 2 3 4 5] 3)&quot;, :offset 86, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (concat (subvec x 0 y)\n           (subvec x (inc y))))\n [1 2 3 4 5 6 7] 3)&quot;, :offset 88, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(remove 3 [1 2 3 4 5 6 7])&quot;, :offset 26, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(remove 3 '(1 2 3 4 5 6 7))&quot;, :offset 27, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(remove #{3} [1 2 3 4 5 6 7])&quot;, :offset 29, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (conj result (remove #{(nth x (- i 1))} x)))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 176, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (set (conj result (remove #{(nth x (- i 1))} x))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 182, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) ((flatten (conj result (remove #{(nth x (- i 1))} x)))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 188, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(set (1 2 3 4 5 7 8 1 2 4 5 6 7 8))&quot;, :offset 35, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(set (vec [(1 2 3 4 5 7 8 1 2 4 5 6 7 8)]))&quot;, :offset 43, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(set (vec (1 2 3 4 5 7 8 1 2 4 5 6 7 8)))&quot;, :offset 41, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(set [(1 2 3 4 5 7 8 1 2 4 5 6 7 8)])&quot;, :offset 37, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(set '(1 2 3 4 5 7 8 1 2 4 5 6 7 8))&quot;, :offset 36, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(set (list (1 2 3 4 5 7 8 1 2 4 5 6 7 8)))&quot;, :offset 42, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (set (flatten (conj result (remove #{(nth x (- i 1))} x)))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 192, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (flatten (conj result (remove #{(nth x (- i 1))} x))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 186, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (list (flatten (conj result (remove #{(nth x (- i 1))} x)))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 193, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) ('(flatten (conj result (remove #{(nth x (- i 1))} x)))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 189, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (vec (flatten (conj result (remove #{(nth x (- i 1))} x)))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 192, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(sorted-set [1 2 4 5 6 7 8 1 2 3 4 5 7 8])&quot;, :offset 42, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(set [1 2 4 5 6 7 8 1 2 3 4 5 7 8])&quot;, :offset 35, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (set (vec (flatten (conj result (remove #{(nth x (- i 1))} x))))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 198, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result #{}]\n     (if (&lt; i (count x))\n       (recur (* i 2) (conj result (remove #{(nth x (- i 1))} x)))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 177, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result #{}]\n     (if (&lt; i (count x))\n       (recur (* i 2) (union (remove #{(nth x (- i 1))} x) result))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 178, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result #{}]\n     (if (&lt; i (count x))\n       (recur (* i 2) (set (vec (flatten (conj result (remove #{(nth x (- i 1))} x))))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 199, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result #{}]\n     (if (&lt; i (count x))\n       (recur (* i 2) (clojure.set/union result (disj (set x) (nth x (- i 1)))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 191, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result #{}]\n     (if (&lt; i (count x))\n       (recur (* i 2) (disj (set x) (nth x (- i 1))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 164, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result #{}]\n     (if (&lt; i (count x))\n       (recur (* i 2) (conj result (disj (set x) (nth x (- i 1)))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 178, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result #{}]\n     (if (&lt; i (count x))\n       (recur (* i 2) (flatten (conj result (disj (set x) (nth x (- i 1))))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 188, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (conj result (nth x (- i 1))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 162, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (conj result (nth x (- i 1))))\n       (disj (set x) result))))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 177, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(disj #{1 2 3 4 5 6 7} [3 6])&quot;, :offset 29, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(disj #{1 2 3 4 5 6 7} 3 6)&quot;, :offset 27, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(disj #{1 2 3 4 5 6 7} #{3 6})&quot;, :offset 30, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(reduce + [1 2])&quot;, :offset 16, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(map #(+0 %) [1 2])&quot;, :offset 19, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((map #(+) [1 2]))&quot;, :offset 18, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(map #(+ 0 %) [1 2])&quot;, :offset 20, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (conj result (nth x (- i 1))))\n       (map #(disj (set x) %) result))))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 186, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(remove [1 2] [1 2 3 4 5 6 7])&quot;, :offset 30, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(remove #{1 2} [1 2 3 4 5 6 7])&quot;, :offset 31, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          z []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (conj z (nth x (- i 1))))\n       (remove (set z) x))))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 164, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (* i 2) (conj result (nth x (- i 1))))\n       result)))\n [:a :b :c :d :e :f] 2)&quot;, :offset 164, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt;= i (count x))\n       (recur (* i 2) (conj result (nth x (- i 1))))\n       result)))\n [:a :b :c :d :e :f] 2)&quot;, :offset 165, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;+((fn [x y]\n    (loop [i y\n           result []]\n      (if (&lt; i (count x))\n        (recur (+ i i) (conj result (nth x (- i 1))))\n        result)))\n  [:a :b :c :d :e :f] 2)&quot;, :offset 171, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          z []]\n     (if (&lt; i (count x))\n       (recur (+ i i) (conj z (nth x (- i 1))))\n       (remove (set z) x))))\n [:a :b :c :d :e :f] 2)&quot;, :offset 166, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          z []]\n     (if (&lt;= i (count x))\n       (recur (+ i i) (conj z (nth x (- i 1))))\n       (remove (set z) x))))\n [:a :b :c :d :e :f] 2)&quot;, :offset 167, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (count x))\n       (recur (+ i i) (conj result (nth x (- i 1))))\n       result)))\n [:a :b :c :d :e :f] 2)&quot;, :offset 164, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt;= i (count x))\n       (recur (+ i i) (conj result (nth x (- i 1))))\n       result)))\n [:a :b :c :d :e :f] 2)&quot;, :offset 165, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt; i (+ 1 (count x)))\n       (recur (+ i i) (conj result (nth x (- i 1))))\n       result)))\n [:a :b :c :d :e :f] 2)&quot;, :offset 170, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(count [:a :b :c :d :e :f])&quot;, :offset 27, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;=((fn [x y]\n    (loop [i y\n           result []]\n      (if (&lt;= i (+ 1 (count x)))\n        (recur (+ i i) (conj result (nth x (- i 1))))\n        result)))\n  [:a :b :c :d :e :f] 2)&quot;, :offset 178, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          z []]\n     (if (&lt;= i (count x))\n       (recur (+ i y) (conj z (nth x (- i 1))))\n       (remove (set z) x))))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 165, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [x y]\n   (loop [i y\n          result []]\n     (if (&lt;= i (count x))\n       (recur (+ i y) (conj result (nth x (- i 1))))\n       result)))\n [1 2 3 4 5 6 7 8] 3)&quot;, :offset 163, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(#(apply concat (partition-all (dec %2) %2 %1))\n  [1 2 3 4 5 6 7 8] 3)&quot;, :offset 70, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(#(seq [take % %2]) 3 [1 2 3 4 5 6])&quot;, :offset 36, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(#([take % %2]) 3 [1 2 3 4 5 6])&quot;, :offset 32, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(#(vec [take % %2]) 3 [1 2 3 4 5 6])&quot;, :offset 36, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(#(vec (take % %2)) 3 [1 2 3 4 5 6])&quot;, :offset 36, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(#(conj (take % %2) (nthrest % %2)) 3 [1 2 3 4 5 6])&quot;, :offset 52, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(#(conj (vec (take % %2)) (nthrest % %2)) 3 [1 2 3 4 5 6])&quot;, :offset 58, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(#(take % %2) 3 [1 2 3 4 5 6])&quot;, :offset 30, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(#(nthrest % %2) 3 [1 2 3 4 5 6])&quot;, :offset 33, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;(#((nthrest %2 %1)) 3 [1 2 3 4 5 6])&quot;, :offset 36, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(nthrest %2 %1) 3 [1 2 3 4 5 6])&quot;, :offset 34, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(vec (nthrest %2 %1)) 3 [1 2 3 4 5 6])&quot;, :offset 40, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(conj (vec (take %1 %2)) (vec (nthrest %2 %1))) 3 [1 2 3 4 5 6])&quot;, :offset 66, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(conj (vec (vec (take %1 %2))) (vec (nthrest %2 %1))) 3 [1 2 3 4 5 6])&quot;, :offset 72, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(apply conj (vec (take %1 %2)) (vec (nthrest %2 %1))) 3 [1 2 3 4 5 6])&quot;, :offset 72, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(reduce conj (vec (take %1 %2)) (vec (nthrest %2 %1))) 3 [1 2 3 4 5 6])&quot;, :offset 73, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(reduce conj (list (vec (take %1 %2))) (vec (nthrest %2 %1))) 3 [1 2 3 4 5 6])&quot;, :offset 80, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(reduce conj (list (vec (take %1 %2))) (list (vec (nthrest %2 %1)))) 3 [1 2 3 4 5 6])&quot;, :offset 87, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(conj (list (vec (take %1 %2))) (list (vec (nthrest %2 %1)))) \n  3 [1 2 3 4 5 6])&quot;, :offset 83, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(apply conj (list (take %1 %2)) (list (nthrest %2 %1)))\n  3 [1 2 3 4 5 6])&quot;, :offset 76, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(apply conj (take %1 %2) (nthrest %2 %1))\n  3 [1 2 3 4 5 6])&quot;, :offset 62, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(apply conj (vec (take %1 %2)) (vec (nthrest %2 %1)))\n  3 [1 2 3 4 5 6])&quot;, :offset 74, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(apply conj (list (vec (take %1 %2))) (list (vec (nthrest %2 %1))))\n  3 [1 2 3 4 5 6])&quot;, :offset 88, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(apply conj (list (vec (nthrest %2 %1))) (list (vec (take %1 %2))))\n  3 [1 2 3 4 5 6])&quot;, :offset 88, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;((fn [n xs] \n   (list (take n xs) (drop n xs)))\n 3 [1 2 3 4 5 6])&quot;, :offset 65, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;((juxt take drop)\n 3 [1 2 3 4 5 6])&quot;, :offset 35, :ns &quot;ninety-nine-lisp-problems.core&quot;} {:command &quot;((fn [n s] [(take n s) (drop n s)])\n 3 [1 2 3 4 5 6])&quot;, :offset 53, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(apply conj ([(nthrest %2 %1)]) (list (vec (take %1 %2))))\n  3 [1 2 3 4 5 6])&quot;, :offset 79, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(apply conj [(nthrest %2 %1)] (list (vec (take %1 %2))))\n  3 [1 2 3 4 5 6])&quot;, :offset 77, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(apply conj (list [(nthrest %2 %1)]) (list [(take %1 %2)]))\n  3 [1 2 3 4 5 6])&quot;, :offset 80, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(apply conj (list [nthrest %2 %1]) (list [(take %1 %2)]))\n  3 [1 2 3 4 5 6])&quot;, :offset 78, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(apply conj [(nthrest %2 %1)] [(take %1 %2)])\n  3 [1 2 3 4 5 6])&quot;, :offset 66, :ns &quot;ninety-nine-lisp-problems.test&quot;} {:command &quot;(#(apply conj [(take %1 %2)] [(nthrest %2 %1)])\n  3 [1 2 3 4 5 6])&quot;, :offset 66, :ns &quot;ninety-nine-lisp-problems.test&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.Unnamed">
    <configuration name="Unnamed" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" nameIsGenerated="true">
      <module name="ninety-nine-lisp-problems" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="ninety-nine-lisp-problems.core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="ninety-nine-lisp-problems" />
      <setting name="path" value="" />
      <setting name="namespace" value="ninety-nine-lisp-problems.core" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$" />
      <method v="2" />
    </configuration>
    <configuration name="test" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="ninety-nine-lisp-problems" />
      <setting name="path" value="$PROJECT_DIR$/src/ninety_nine_lisp_problems/test.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/ninety_nine_lisp_problems" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure Application.ninety-nine-lisp-problems.core" />
      <item itemvalue="Clojure Application.test" />
      <item itemvalue="Clojure REPL.Unnamed" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.test" />
        <item itemvalue="Clojure Application.ninety-nine-lisp-problems.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="62c14982-1a93-4253-b7db-e74267cfb22b" name="Default Changelist" comment="" />
      <created>1567576794501</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1567576794501</updated>
    </task>
    <servers />
  </component>
</project>